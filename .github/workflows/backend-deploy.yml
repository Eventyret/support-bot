name: ðŸ”§ Backend API Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
  workflow_call:
    outputs:
      backend_ready:
        description: "Indicates if the backend deployment completed successfully"
        value: ${{ jobs.deploy.outputs.ready }}

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: support-bot-prod-backend
  ECS_CLUSTER: support-bot-prod-cluster
  ECS_SERVICE: support-bot-prod-service
  ECS_TASK_DEFINITION: .aws/task-definition.json

permissions:
  contents: read
  id-token: write

jobs:
  lint-and-test:
    name: Lint and Test Backend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run Linting
      working-directory: ./backend
      run: npm run lint
    
    - name: Run Tests
      working-directory: ./backend
      run: npm test
  
  build:
    name: Build Backend Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Backend
    needs: build
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.set_output.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download task definition
      run: |
        mkdir -p .aws
        aws ecs describe-task-definition --task-definition support-bot-prod-backend --query taskDefinition > .aws/task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: support-bot-prod-backend
        image: ${{ needs.build.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        timeout-minutes: 5
        codedeploy-appspec: |
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: <TASK_DEFINITION>
                  LoadBalancerInfo:
                    ContainerName: "support-bot-prod-backend"
                    ContainerPort: 3000
                  PlatformVersion: "LATEST"
                DeploymentConfiguration:
                  MaximumPercent: 200
                  MinimumHealthyPercent: 100
                  DeploymentCircuitBreaker:
                    Enable: true
                    Rollback: true
        
    - name: Set Output
      id: set_output
      run: echo "ready=true" >> $GITHUB_OUTPUT 