name: 🏗️ Infrastructure Deployment (Terraform)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
      skip_import:
        description: 'Skip ECS service import (use if import hangs)'
        required: false
        default: false
        type: boolean
      force_unlock:
        description: 'Force unlock Terraform state if locked'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: string
      skip_import:
        description: 'Skip ECS service import (use if import hangs)'
        required: false
        default: false
        type: boolean
      force_unlock:
        description: 'Force unlock Terraform state if locked'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: '1.7.0'
  AWS_REGION: eu-west-2

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'OpenTofu'
    runs-on: ubuntu-latest
    outputs:
      infrastructure_ready: ${{ steps.set_output.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}
    
    - name: Create S3 bucket for Terraform state
      run: |
        # Check if bucket exists - will return exit code 0 if bucket exists and you have access
        if aws s3api head-bucket --bucket support-bot-terraform-state 2>/dev/null; then
          echo "S3 bucket already exists."
        else
          echo "Creating S3 bucket for Terraform state..."
          aws s3api create-bucket \
            --bucket support-bot-terraform-state \
            --region $AWS_REGION \
            --create-bucket-configuration LocationConstraint=$AWS_REGION
          
          aws s3api put-bucket-versioning \
            --bucket support-bot-terraform-state \
            --versioning-configuration Status=Enabled
          
          aws s3api put-bucket-encryption \
            --bucket support-bot-terraform-state \
            --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        fi
    
    - name: Create DynamoDB table for Terraform locks
      run: |
        # Check if table exists - returns "ResourceNotFoundException" if it doesn't exist
        TABLE_EXISTS=$(aws dynamodb describe-table --table-name support-bot-terraform-locks 2>&1 || true)
        if [[ "$TABLE_EXISTS" == *"ResourceNotFoundException"* ]]; then
          echo "Creating DynamoDB table for Terraform locks..."
          aws dynamodb create-table \
            --table-name support-bot-terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        else
          echo "DynamoDB table already exists."
        fi
    
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ env.TF_VERSION }}
    
    - name: OpenTofu Init
      working-directory: ./infra
      run: tofu init
    
    - name: Force Unlock Terraform State
      if: inputs.force_unlock == true || github.event.inputs.force_unlock == 'true'
      working-directory: ./infra
      run: |
        echo "Checking for and removing any existing state locks..."
        
        # Get the current locks from DynamoDB
        LOCKS=$(aws dynamodb scan --table-name support-bot-terraform-locks --query "Items[*].LockID.S" --output text || echo "")
        
        if [[ -n "$LOCKS" ]]; then
          echo "Found existing locks. Attempting to force unlock..."
          
          # For each lock, attempt to force unlock it
          for LOCK_ID in $LOCKS; do
            echo "Unlocking state with lock ID: $LOCK_ID"
            # Force unlock without asking for confirmation (-force flag)
            tofu force-unlock -force "$LOCK_ID" || echo "Failed to unlock $LOCK_ID, continuing anyway..."
          done
          
          # Directly remove locks from DynamoDB as a fallback
          echo "Directly removing locks from DynamoDB table..."
          for LOCK_ID in $LOCKS; do
            aws dynamodb delete-item \
              --table-name support-bot-terraform-locks \
              --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" || echo "Failed to delete lock $LOCK_ID from DynamoDB"
          done
        else
          echo "No existing locks found."
        fi
    
    - name: Check if ECS service exists
      id: check_ecs
      working-directory: ./infra
      run: |
        echo "Checking if ECS service exists..."
        if aws ecs describe-services --cluster support-bot-prod-cluster --services support-bot-prod-service 2>/dev/null | grep -q "support-bot-prod-service"; then
          echo "ECS service 'support-bot-prod-service' exists in cluster 'support-bot-prod-cluster'"
          echo "ecs_service_exists=true" >> $GITHUB_OUTPUT
        else
          echo "ECS service not found"
          echo "ecs_service_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Import existing ECS service if needed
      if: steps.check_ecs.outputs.ecs_service_exists == 'true' && inputs.skip_import != true && github.event.inputs.skip_import != 'true'
      id: import_ecs
      working-directory: ./infra
      timeout-minutes: 2
      env:
        TF_VAR_mongodb_uri: ${{ secrets.TF_VAR_DATABASE_URL }}
        TF_VAR_environment: ${{ inputs.environment || github.event.inputs.environment }}
        TF_VAR_node_env: ${{ secrets.TF_VAR_NODE_ENV || 'production' }}
        TF_VAR_n8n_webhook_url: ${{ secrets.TF_VAR_N8N_WEBHOOK_URL || '' }}
        TF_VAR_cleanup_api_key: ${{ secrets.TF_VAR_CLEANUP_API_KEY || '' }}
        TF_VAR_n8n_encryption_key: ${{ secrets.TF_VAR_N8N_ENCRYPTION_KEY || '' }}
      run: |
        echo "Importing existing ECS service into Terraform state..."
        echo "Using command: tofu import module.ecs.aws_ecs_service.backend support-bot-prod-cluster/support-bot-prod-service"
        
        # First try to create state file if it doesn't exist
        touch terraform.tfstate || true
        
        # Run import with increased verbosity, no lock, and a timeout
        if timeout 90s tofu import -input=false -lock=false module.ecs.aws_ecs_service.backend support-bot-prod-cluster/support-bot-prod-service; then
          echo "Import completed successfully"
        else
          echo "Import timed out or failed. This is not fatal - will continue with apply."
          echo "If issues persist, rerun workflow with 'skip_import' option enabled."
        fi
    
    - name: OpenTofu Validate
      working-directory: ./infra
      run: tofu validate
    
    - name: OpenTofu Plan
      working-directory: ./infra
      env:
        TF_VAR_mongodb_uri: ${{ secrets.TF_VAR_DATABASE_URL }}
        TF_VAR_environment: ${{ inputs.environment || github.event.inputs.environment }}
        TF_VAR_node_env: ${{ secrets.TF_VAR_NODE_ENV || 'production' }}
        TF_VAR_n8n_webhook_url: ${{ secrets.TF_VAR_N8N_WEBHOOK_URL || '' }}
        TF_VAR_cleanup_api_key: ${{ secrets.TF_VAR_CLEANUP_API_KEY || '' }}
        TF_VAR_n8n_encryption_key: ${{ secrets.TF_VAR_N8N_ENCRYPTION_KEY || '' }}
      run: tofu plan -input=false -lock=false
    
    - name: OpenTofu Apply
      working-directory: ./infra
      env:
        TF_VAR_mongodb_uri: ${{ secrets.TF_VAR_DATABASE_URL }}
        TF_VAR_environment: ${{ inputs.environment || github.event.inputs.environment }}
        TF_VAR_node_env: ${{ secrets.TF_VAR_NODE_ENV || 'production' }}
        TF_VAR_n8n_webhook_url: ${{ secrets.TF_VAR_N8N_WEBHOOK_URL || '' }}
        TF_VAR_cleanup_api_key: ${{ secrets.TF_VAR_CLEANUP_API_KEY || '' }}
        TF_VAR_n8n_encryption_key: ${{ secrets.TF_VAR_N8N_ENCRYPTION_KEY || '' }}
      run: tofu apply -auto-approve -input=false -lock=false
      
    - name: Set Output
      id: set_output
      run: echo "ready=true" >> $GITHUB_OUTPUT 