name: 🖥️ Frontend Web Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      backend_url:
        description: 'Backend URL to use for the frontend build'
        required: true
        type: string
  workflow_call:
    inputs:
      backend_url:
        description: 'Backend URL to use for the frontend build'
        required: true
        type: string
    outputs:
      frontend_ready:
        description: "Indicates if the frontend deployment completed successfully"
        value: ${{ jobs.build-and-deploy.outputs.ready }}

env:
  AWS_REGION: eu-west-2
  S3_BUCKET: support-bot-frontend-prod

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.set_output.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Build frontend
      working-directory: ./frontend
      run: |
        # Get backend URL from Parameter Store if not provided
        BACKEND_URL="${{ inputs.backend_url }}"
        if [ -z "$BACKEND_URL" ] || [ "$BACKEND_URL" = "http://" ]; then
          echo "Retrieving backend URL from Parameter Store"
          BACKEND_URL="http://$(aws ssm get-parameter --name "/support-bot/prod/alb-dns-name" --query "Parameter.Value" --output text)"
        fi
        
        # Retrieve frontend URL from Parameter Store
        FRONTEND_URL="http://$(aws ssm get-parameter --name "/support-bot/prod/frontend-url" --query "Parameter.Value" --output text)"
        
        echo "Building frontend with backend URL: $BACKEND_URL and frontend URL: $FRONTEND_URL"
        
        # Build with environment variables 
        VITE_BACKEND_URL="$BACKEND_URL" VITE_FRONTEND_URL="$FRONTEND_URL" npm ci
        VITE_BACKEND_URL="$BACKEND_URL" VITE_FRONTEND_URL="$FRONTEND_URL" npm run build
      
    - name: Deploy to S3
      working-directory: ./frontend
      run: |
        aws s3 sync dist/ s3://$S3_BUCKET/ --delete
      
    - name: Invalidate CloudFront cache (if configured)
      run: |
        if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        else
          echo "No CloudFront distribution ID provided. Skipping cache invalidation."
        fi
        
    - name: Set Output
      id: set_output
      run: echo "ready=true" >> $GITHUB_OUTPUT 