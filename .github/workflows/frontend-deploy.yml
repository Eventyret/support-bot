name: 🖥️ Frontend Web Deployment

on:
  workflow_dispatch:
    inputs:
      backend_url:
        description: 'Backend URL to use for the frontend build'
        required: true
        type: string
  workflow_call:
    inputs:
      backend_url:
        description: 'Backend URL to use for the frontend build'
        required: false
        type: string
        default: ""
    outputs:
      frontend_ready:
        description: "Indicates if the frontend deployment completed successfully"
        value: ${{ jobs.frontend-deploy.outputs.ready }}

env:
  AWS_REGION: eu-west-2
  S3_BUCKET: support-bot-frontend-prod

permissions:
  contents: read
  id-token: write

jobs:
  frontend-deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.set_output.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Update npm
      run: npm install -g npm@11.3.0
      
    - name: Install Dependencies
      run: |
        # Install platform-specific dependencies that might be missing
        npm ci --no-optional=false
        cd frontend
        npm install --save-optional lightningcss-linux-x64-gnu
        npm install --save-optional @rollup/rollup-linux-x64-gnu
      
    - name: Lint Frontend
      run: npm run lint:frontend
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Build Frontend
      run: |
        # Get backend URL from Parameter Store if not provided
        BACKEND_URL="${{ inputs.backend_url }}"
        if [ -z "$BACKEND_URL" ] || [ "$BACKEND_URL" = "http://" ]; then
          echo "Retrieving ALB backend URL from Parameter Store"
          ALB_URL="http://$(aws ssm get-parameter --name "/support-bot/prod/alb-dns-name" --query "Parameter.Value" --output text)"
          
          # Try to use the external backend first, fallback to ALB if that fails
          BACKEND_URL="https://cognito-backend.fairytales.dev"
          echo "Using external backend URL: $BACKEND_URL (with ALB fallback: $ALB_URL)"
          # Ping the external backend to see if it's available
          if ! curl --output /dev/null --silent --head --fail "$BACKEND_URL/health"; then
            echo "External backend not available, falling back to ALB: $ALB_URL"
            BACKEND_URL="$ALB_URL"
          fi
        fi
        
        # Retrieve frontend URL from Parameter Store
        FRONTEND_URL="http://$(aws ssm get-parameter --name "/support-bot/prod/frontend-url" --query "Parameter.Value" --output text)"
        
        echo "Building frontend with backend URL: $BACKEND_URL and frontend URL: $FRONTEND_URL"
        
        # Set environment variables to skip platform-specific dependency errors
        cd frontend
        export ROLLUP_SKIP_LOAD_NATIVE_PLUGIN=true
        export LIGHTNINGCSS_SKIP_NATIVE_TRANSFORM=1
        VITE_BACKEND_URL="$BACKEND_URL" VITE_FRONTEND_URL="$FRONTEND_URL" npm run build
      
    - name: Deploy to S3
      run: |
        aws s3 sync frontend/dist/ s3://$S3_BUCKET/ --delete
      
    - name: Invalidate CloudFront cache (if configured)
      run: |
        if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        else
          echo "No CloudFront distribution ID provided. Skipping cache invalidation."
        fi
        
    - name: Set Output
      id: set_output
      run: echo "ready=true" >> $GITHUB_OUTPUT 