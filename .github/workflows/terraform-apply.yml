name: Apply OpenTofu (Terraform)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: string

env:
  TF_VERSION: '1.7.0'
  AWS_REGION: eu-west-2

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'OpenTofu'
    runs-on: ubuntu-latest
    outputs:
      infrastructure_ready: ${{ steps.set_output.outputs.ready }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create S3 bucket for Terraform state
      run: |
        BUCKET_EXISTS=$(aws s3api head-bucket --bucket support-bot-terraform-state 2>&1 || true)
        if [[ -n "$BUCKET_EXISTS" ]]; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3api create-bucket \
            --bucket support-bot-terraform-state \
            --region $AWS_REGION \
            --create-bucket-configuration LocationConstraint=$AWS_REGION
          
          aws s3api put-bucket-versioning \
            --bucket support-bot-terraform-state \
            --versioning-configuration Status=Enabled
          
          aws s3api put-bucket-encryption \
            --bucket support-bot-terraform-state \
            --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        else
          echo "S3 bucket already exists."
        fi
    
    - name: Create DynamoDB table for Terraform locks
      run: |
        TABLE_EXISTS=$(aws dynamodb describe-table --table-name support-bot-terraform-locks 2>&1 || true)
        if [[ "$TABLE_EXISTS" == *"ResourceNotFoundException"* ]]; then
          echo "Creating DynamoDB table for Terraform locks..."
          aws dynamodb create-table \
            --table-name support-bot-terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        else
          echo "DynamoDB table already exists."
        fi
    
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ env.TF_VERSION }}
    
    - name: OpenTofu Init
      working-directory: ./infra
      run: tofu init
    
    - name: OpenTofu Validate
      working-directory: ./infra
      run: tofu validate
    
    - name: OpenTofu Plan
      working-directory: ./infra
      env:
        TF_VAR_mongodb_uri: ${{ secrets.TF_VAR_mongodb_uri }}
        TF_VAR_environment: ${{ inputs.environment || github.event.inputs.environment }}
      run: tofu plan -input=false
    
    - name: OpenTofu Apply
      working-directory: ./infra
      env:
        TF_VAR_mongodb_uri: ${{ secrets.TF_VAR_mongodb_uri }}
        TF_VAR_environment: ${{ inputs.environment || github.event.inputs.environment }}
      run: tofu apply -auto-approve -input=false
      
    - name: Set Output
      id: set_output
      run: echo "ready=true" >> $GITHUB_OUTPUT 