services:
  mongodb:
    image: mongo:latest
    container_name: support-bot-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-support-bot}
    networks:
      - support-bot-network
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: support-bot-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n}
    networks:
      - support-bot-network
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: support-bot-n8n
    ports:
      - "${N8N_PORT:-5678}:5678"
    env_file:
      - .env
    environment:
      - N8N_HOST=${N8N_HOST:-n8n}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_LISTEN_ADDRESS=0.0.0.0
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - support-bot-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: builder # Use the builder stage for development
    container_name: support-bot-backend
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - DATABASE_URL=mongodb://mongodb:27017/${MONGO_INITDB_DATABASE:-support-bot}
      - PORT=${BACKEND_PORT:-3000}
      - N8N_WEBHOOK_URL=http://n8n:${N8N_PORT:-5678}/webhook/${N8N_WEBHOOK_PATH:-support-bot-ai}
      - N8N_WEBHOOK_URL_DEV=http://n8n:${N8N_PORT:-5678}/webhook/${N8N_WEBHOOK_PATH_DEV:-support-bot-ai-dev}
      - CHAT_CLEANUP_AGE=${CHAT_CLEANUP_AGE:-30d}
      - CLEANUP_API_KEY=${CLEANUP_API_KEY}
      - NODE_ENV=${NODE_ENV:-development}
    command: npm run dev
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${BACKEND_PORT:-3000}/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    depends_on:
      - mongodb
      - n8n
    networks:
      - support-bot-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: support-bot-frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - VITE_BACKEND_URL=http://localhost:${BACKEND_PORT:-3000}
    command: npm run dev
    depends_on:
      backend:
        condition: service_healthy

volumes:
  mongodb_data:
    name: support-bot-mongodb-data
  n8n_data:
    name: support-bot-n8n-data
  postgres_data:
    name: support-bot-postgres-data

networks:
  support-bot-network:
    name: support-bot-network
